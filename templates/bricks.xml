<templateSet group="bricks">
  <template name="menu-brick" value="import pl.touk.bricks.correlation._&#10;import pl.touk.bricks.params.{InputBrickParams, OutputBrickParams}&#10;import pl.touk.bricks.protocol.PagingChooserViewCreator.Description.WithFollowingEmptyLine&#10;import pl.touk.bricks.protocol.SplitterInputViewCreator&#10;import pl.touk.bricks.protocol.SplitterInputViewCreator.SplitterChooserEntry&#10;import pl.touk.bricks.protocol.SplitterInputViewCreator.SplitterChooserItem.CaseSlotItem&#10;import pl.touk.bricks.types.Slot&#10;import pl.touk.bricks.types.splitter.FormSplitterBrick&#10;import pl.touk.rashabar.MobilizerForm&#10;import pl.touk.tsuyu.domain.ProcessError&#10;&#10;import scala.concurrent.{ExecutionContext, Future}&#10;&#10;class $BrickClassName$MenuFormSplitter(implicit executionContext: ExecutionContext,&#10;              $lowercaseBrickClassName$MenuMessages: $BrickClassName$MenuMessages)&#10;  extends FormSplitterBrick[MobilizerForm, ProcessError](&quot;$name$-menu-form-splitter&quot;)(&#10;    consumes = Nil,&#10;    produces = Map(&#10;      $BrickClassName$MenuFormSplitter.$option1$ -&gt; Nil,&#10;      $BrickClassName$MenuFormSplitter.$option2$ -&gt; Nil,&#10;    )) {&#10;&#10;  override def handle(creator: SplitterInputViewCreator[MobilizerForm],&#10;                      params: InputBrickParams)&#10;                     (implicit correlation: Correlation): Future[MobilizerForm] = Future.successful {&#10;    val entries: Seq[SplitterChooserEntry] = List(&#10;      SplitterChooserEntry(&quot;1&quot;, $lowercaseBrickClassName$MenuMessages.$option1lowercase$Title, CaseSlotItem($BrickClassName$MenuFormSplitter.$option1$, Nil)),&#10;      SplitterChooserEntry(&quot;2&quot;, $lowercaseBrickClassName$MenuMessages.$option2lowercase$Title, CaseSlotItem($BrickClassName$MenuFormSplitter.$option2$, Nil)),&#10;    )&#10;&#10;    creator&#10;      .createCustomChooserInputView(&#10;        WithFollowingEmptyLine($lowercaseBrickClassName$MenuMessages.title),&#10;        entries,&#10;        OutputBrickParams.empty&#10;      )&#10;  }&#10;}&#10;&#10;object $BrickClassName$MenuFormSplitter {&#10;  val $option1$ = Slot.Slot1&#10;  val $option2$ = Slot.Slot2&#10;}&#10;&#10;final case class $BrickClassName$MenuMessages(title: String,&#10;                                     $option1lowercase$Title: String,&#10;                                     $option2lowercase$Title: String)&#10;" description="live template for menu form splitter brick" toReformat="true" toShortenFQNames="true">
    <variable name="BrickClassName" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="lowercaseBrickClassName" expression="camelCase(BrickClassName)" defaultValue="" alwaysStopAt="false" />
    <variable name="name" expression="lowercaseAndDash(BrickClassName)" defaultValue="" alwaysStopAt="false" />
    <variable name="option1" expression="" defaultValue="&quot;Option1&quot;" alwaysStopAt="true" />
    <variable name="option2" expression="" defaultValue="&quot;Option2&quot;" alwaysStopAt="true" />
    <variable name="option1lowercase" expression="camelCase(option1)" defaultValue="" alwaysStopAt="false" />
    <variable name="option2lowercase" expression="camelCase(option2)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="SCALA" value="true" />
    </context>
  </template>
</templateSet>